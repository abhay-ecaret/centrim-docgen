{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/extension.ts","../external node-commonjs \"child_process\"","../external commonjs \"vscode\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport { spawn } from 'child_process';\n\n// Define a simple TreeItem for our sidebar view\nclass DocGenTreeItem extends vscode.TreeItem {\n    constructor(\n        public readonly label: string,\n        public readonly collapsibleState: vscode.TreeItemCollapsibleState,\n        public readonly command?: vscode.Command,\n        iconId: string = 'rocket' // Default icon for action items\n    ) {\n        super(label, collapsibleState);\n        this.tooltip = this.label;\n        // Default description, can be overridden by specific items\n        this.description = \"Click to configure and generate\";\n        this.iconPath = new vscode.ThemeIcon(iconId);\n    }\n}\n\n// Define a TreeDataProvider for our sidebar view\nclass DocGenTreeDataProvider implements vscode.TreeDataProvider<DocGenTreeItem> {\n    private _onDidChangeTreeData: vscode.EventEmitter<DocGenTreeItem | undefined | null | void> = new vscode.EventEmitter<DocGenTreeItem | undefined | null | void>();\n    readonly onDidChangeTreeData: vscode.Event<DocGenTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n    // Status for the sidebar view, controlling what is displayed\n    private _status: 'idle' | 'checking_ollama' | 'ollama_ready' | 'ollama_not_ready' | 'generating' | 'generation_complete' = 'idle';\n\n    constructor() {\n        // Initial check for Ollama status when the sidebar is loaded\n        this.updateStatus('checking_ollama');\n        this.checkOllamaStatusInSidebar(); // Perform initial check\n    }\n\n    public updateStatus(newStatus: typeof this._status) {\n        this._status = newStatus;\n        this._onDidChangeTreeData.fire(); // Notify VS Code to refresh the tree view\n    }\n\n    getTreeItem(element: DocGenTreeItem): vscode.TreeItem {\n        return element;\n    }\n\n    getChildren(element?: DocGenTreeItem): Thenable<DocGenTreeItem[]> {\n        if (element) {\n            return Promise.resolve([]); // No children for now\n        }\n\n        const items: DocGenTreeItem[] = [];\n        const openConfigCommand: vscode.Command = {\n            command: 'centrim-docgen.openConfigPanel',\n            title: 'Open Documentation Configuration',\n            tooltip: 'Open the panel to configure and generate documentation'\n        };\n\n        switch (this._status) {\n            case 'checking_ollama':\n                items.push(new DocGenTreeItem(\n                    'Checking Ollama Status...',\n                    vscode.TreeItemCollapsibleState.None,\n                    undefined, // No command for this state\n                    'sync~spin' // Spinning icon\n                ));\n                items[0].description = 'Please wait';\n                break;\n            case 'ollama_ready':\n                items.push(new DocGenTreeItem(\n                    'Generate Documentation',\n                    vscode.TreeItemCollapsibleState.None,\n                    openConfigCommand,\n                    'file-text'\n                ));\n                items[0].description = 'Ollama is Ready!';\n                items[0].tooltip = 'Click to open configuration and generate documentation.';\n                break;\n            case 'ollama_not_ready':\n                items.push(new DocGenTreeItem(\n                    'Ollama Not Running',\n                    vscode.TreeItemCollapsibleState.None,\n                    { command: 'centrim-docgen.openSettings', title: 'Open Settings' },\n                    'warning'\n                ));\n                items[0].description = 'Click to open settings and configure Ollama URL.';\n                items[0].tooltip = 'Ollama server is unreachable. Please start it or check settings.';\n                break;\n            case 'generating':\n                items.push(new DocGenTreeItem(\n                    'Generating Documentation...',\n                    vscode.TreeItemCollapsibleState.None,\n                    undefined, // No command during generation\n                    'tools' // Tool icon, or 'loading~spin' if it exists, 'sync~spin'\n                ));\n                items[0].description = 'Please wait...';\n                break;\n            case 'generation_complete':\n                items.push(new DocGenTreeItem(\n                    'Documentation Generated',\n                    vscode.TreeItemCollapsibleState.None,\n                    openConfigCommand,\n                    'check'\n                ));\n                items[0].description = 'Click to generate again.';\n                break;\n            default: // 'idle' or unhandled states\n                items.push(new DocGenTreeItem(\n                    'Generate Documentation',\n                    vscode.TreeItemCollapsibleState.None,\n                    openConfigCommand,\n                    'rocket'\n                ));\n                items[0].description = 'Open configuration panel.';\n                break;\n        }\n\n        // Add a manual status check command, always visible\n        items.push(new DocGenTreeItem(\n            'Refresh Ollama Status',\n            vscode.TreeItemCollapsibleState.None,\n            { command: 'centrim-docgen.checkStatus', title: 'Check Ollama Status Now' },\n            'sync' // Refresh icon\n        ));\n\n        return Promise.resolve(items);\n    }\n\n    // Helper to perform Ollama status check and update sidebar\n    private async checkOllamaStatusInSidebar() {\n        const ollamaUrl = vscode.workspace.getConfiguration('centrimDocgen').get<string>('ollamaUrl') || 'http://localhost:11434';\n        try {\n            const response = await fetch(ollamaUrl);\n            if (response.ok) {\n                this.updateStatus('ollama_ready');\n            } else {\n                this.updateStatus('ollama_not_ready');\n            }\n        } catch (error) {\n            this.updateStatus('ollama_not_ready');\n        }\n    }\n}\n\n\nclass DocGenConfigPanel {\n    public static currentPanel: DocGenConfigPanel | undefined;\n    private readonly _panel: vscode.WebviewPanel;\n    private readonly _extensionUri: vscode.Uri;\n    private _disposables: vscode.Disposable[] = [];\n    private _treeDataProvider: DocGenTreeDataProvider; // Reference to the sidebar data provider\n\n    public static createOrShow(extensionUri: vscode.Uri, treeDataProvider: DocGenTreeDataProvider) {\n        const column = vscode.window.activeTextEditor\n            ? vscode.window.activeTextEditor.viewColumn\n            : undefined;\n\n        if (DocGenConfigPanel.currentPanel) {\n            DocGenConfigPanel.currentPanel._panel.reveal(column);\n            DocGenConfigPanel.currentPanel._treeDataProvider = treeDataProvider; // Update ref if needed\n            DocGenConfigPanel.currentPanel._checkOllamaStatus(); // Re-check status on reveal\n            return;\n        }\n\n        const panel = vscode.window.createWebviewPanel(\n            'centrimDocGenConfig',\n            'Centrim DocGen Configuration',\n            column || vscode.ViewColumn.One,\n            {\n                enableScripts: true,\n                localResourceRoots: [vscode.Uri.joinPath(extensionUri, 'media')]\n            }\n        );\n\n        DocGenConfigPanel.currentPanel = new DocGenConfigPanel(panel, extensionUri, treeDataProvider);\n    }\n\n    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri, treeDataProvider: DocGenTreeDataProvider) {\n        this._panel = panel;\n        this._extensionUri = extensionUri;\n        this._treeDataProvider = treeDataProvider; // Assign the reference\n\n        this._update();\n\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n\n        this._panel.webview.onDidReceiveMessage(\n            message => {\n                switch (message.command) {\n                    case 'generateDocs':\n                        this._generateDocs(message.config);\n                        return;\n                    case 'checkOllamaStatus':\n                        this._checkOllamaStatus();\n                        return;\n                }\n            },\n            null,\n            this._disposables\n        );\n    }\n\n    private async _checkOllamaStatus() {\n        const ollamaUrl = vscode.workspace.getConfiguration('centrimDocgen').get<string>('ollamaUrl') || 'http://localhost:11434';\n        try {\n            const response = await fetch(ollamaUrl);\n            const isRunning = response.ok;\n            this._panel.webview.postMessage({\n                command: 'ollamaStatus',\n                isRunning: isRunning\n            });\n            // Update sidebar status based on Ollama status\n            this._treeDataProvider.updateStatus(isRunning ? 'ollama_ready' : 'ollama_not_ready');\n        } catch (error) {\n            this._panel.webview.postMessage({\n                command: 'ollamaStatus',\n                isRunning: false\n            });\n            this._treeDataProvider.updateStatus('ollama_not_ready'); // Update sidebar\n        }\n    }\n\n    private async _generateDocs(config: any) {\n        const outputChannel = vscode.window.createOutputChannel(\"Centrim DocGen\");\n        outputChannel.show(true);\n        outputChannel.appendLine(\"--- Centrim DocGen Session Started ---\");\n\n        // Update sidebar status\n        this._treeDataProvider.updateStatus('generating');\n\n        const workspaceFolders = vscode.workspace.workspaceFolders;\n        if (!workspaceFolders || workspaceFolders.length === 0) {\n            vscode.window.showErrorMessage(\"No workspace folder open. Please open a Git repository folder.\");\n            outputChannel.appendLine(\"Error: No workspace folder open.\");\n            outputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n            this._panel.webview.postMessage({ command: 'generationComplete', success: false, error: \"No workspace folder open.\" });\n            this._treeDataProvider.updateStatus('idle'); // Revert to idle\n            return;\n        }\n\n        const repoPath = workspaceFolders[0].uri.fsPath;\n\n        // Prepare arguments based on config\n        const args = [\n            path.join(this._extensionUri.fsPath, 'src', 'python_scripts', 'git_doc_tool.py')\n        ];\n\n        if (config.diffno) {\n            args.push('--diffno', config.diffno.toString());\n        }\n\n        if (config.model) {\n            args.push('--model', config.model);\n        }\n\n        if (config.watch) {\n            args.push('--watch');\n        }\n\n        if (config.customQuery) {\n            args.push('--custom-query', config.customQuery);\n        }\n\n        const pythonExec = process.platform === 'win32' ? 'python' : 'python3';\n\n        outputChannel.appendLine(`Executing: ${pythonExec} ${args.join(' ')}`);\n        outputChannel.appendLine(`In directory: ${repoPath}`);\n        outputChannel.appendLine(\"------------------------------------\");\n\n        // Update webview with progress\n        this._panel.webview.postMessage({\n            command: 'generationStarted'\n        });\n\n        try {\n            const pythonProcess = spawn(pythonExec, args, { cwd: repoPath });\n\n            pythonProcess.stdout.on('data', (data) => {\n                outputChannel.append(data.toString());\n                this._panel.webview.postMessage({\n                    command: 'outputUpdate',\n                    data: data.toString()\n                });\n            });\n\n            pythonProcess.stderr.on('data', (data) => {\n                outputChannel.append(data.toString());\n                this._panel.webview.postMessage({\n                    command: 'errorUpdate',\n                    data: data.toString()\n                });\n                vscode.window.showErrorMessage(`Centrim DocGen Error: ${data.toString().split('\\n')[0]}`);\n            });\n\n            pythonProcess.on('close', (code) => {\n                if (code === 0) {\n                    vscode.window.showInformationMessage('Centrim DocGen: Documentation generated successfully!');\n                    outputChannel.appendLine(\"Centrim DocGen: Script finished successfully.\");\n                    vscode.commands.executeCommand('workbench.files.action.refreshExplorer');\n                    this._panel.webview.postMessage({\n                        command: 'generationComplete',\n                        success: true\n                    });\n                    this._treeDataProvider.updateStatus('generation_complete'); // Update sidebar status\n                } else {\n                    vscode.window.showErrorMessage(`Centrim DocGen: Script exited with code ${code}. Check output channel for details.`);\n                    outputChannel.appendLine(`Centrim DocGen: Script exited with code ${code}.`);\n                    this._panel.webview.postMessage({\n                        command: 'generationComplete',\n                        success: false,\n                        code: code\n                    });\n                    this._treeDataProvider.updateStatus('ollama_ready'); // Revert to ready state on failure\n                }\n                outputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n            });\n\n            pythonProcess.on('error', (err) => {\n                vscode.window.showErrorMessage(`Failed to start Python script: ${err.message}. Make sure Python is installed and in your PATH.`);\n                outputChannel.appendLine(`Error starting Python script: ${err.message}`);\n                outputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n                this._panel.webview.postMessage({\n                    command: 'generationComplete',\n                    success: false,\n                    error: err.message\n                });\n                this._treeDataProvider.updateStatus('ollama_not_ready'); // Indicate issue with Ollama/Python\n            });\n\n        } catch (error: any) {\n            vscode.window.showErrorMessage(`An unexpected error occurred: ${error.message}`);\n            outputChannel.appendLine(`Unexpected error: ${error.message}`);\n            outputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n            this._panel.webview.postMessage({\n                command: 'generationComplete',\n                success: false,\n                error: error.message\n            });\n            this._treeDataProvider.updateStatus('ollama_not_ready'); // Indicate issue\n        }\n    }\n\n    public dispose() {\n        DocGenConfigPanel.currentPanel = undefined;\n\n        this._panel.dispose();\n\n        while (this._disposables.length) {\n            const x = this._disposables.pop();\n            if (x) {\n                x.dispose();\n            }\n        }\n    }\n\n    private _update() {\n        const webview = this._panel.webview;\n        this._panel.title = 'Centrim DocGen Configuration';\n        this._panel.webview.html = this._getHtmlForWebview(webview);\n    }\n\n    private _getHtmlForWebview(webview: vscode.Webview) {\n        // You can leave this HTML as is, or adjust it based on your preferences.\n        // The changes primarily affect the .ts side for sidebar interaction.\n        return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Centrim DocGen Configuration</title>\n    <style>\n        * {\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background: var(--vscode-editor-background);\n            color: var(--vscode-editor-foreground);\n            line-height: 1.6;\n        }\n        \n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        \n        .header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 8px;\n            background: var(--vscode-panel-background);\n        }\n        \n        .header h1 {\n            margin: 0 0 10px 0;\n            color: var(--vscode-textLink-foreground);\n            font-size: 24px;\n        }\n        \n        .header p {\n            margin: 0;\n            opacity: 0.8;\n        }\n        \n        .status-bar {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 15px;\n            margin-bottom: 20px;\n            border-radius: 6px;\n            background: var(--vscode-inputValidation-infoBorder);\n            color: var(--vscode-inputValidation-infoForeground);\n        }\n        \n        .status-indicator {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        \n        .status-dot {\n            width: 10px;\n            height: 10px;\n            border-radius: 50%;\n            background: var(--vscode-inputValidation-errorBorder);\n        }\n        \n        .status-dot.running {\n            background: var(--vscode-inputValidation-infoBorder);\n            animation: pulse 2s infinite;\n        }\n        \n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n        \n        .form-section {\n            background: var(--vscode-panel-background);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 8px;\n            padding: 25px;\n            margin-bottom: 20px;\n        }\n        \n        .form-section h3 {\n            margin: 0 0 20px 0;\n            color: var(--vscode-textLink-foreground);\n            font-size: 18px;\n        }\n        \n        .form-group {\n            margin-bottom: 20px;\n        }\n        \n        .form-group:last-child {\n            margin-bottom: 0;\n        }\n        \n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 500;\n            color: var(--vscode-input-foreground);\n        }\n        \n        input, select, textarea {\n            width: 100%;\n            padding: 10px 12px;\n            border: 1px solid var(--vscode-input-border);\n            border-radius: 4px;\n            background: var(--vscode-input-background);\n            color: var(--vscode-input-foreground);\n            font-size: 14px;\n            font-family: inherit;\n        }\n        \n        input:focus, select:focus, textarea:focus {\n            outline: none;\n            border-color: var(--vscode-focusBorder);\n        }\n        \n        textarea {\n            resize: vertical;\n            min-height: 80px;\n        }\n        \n        .checkbox-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .checkbox-group input[type=\"checkbox\"] {\n            width: auto;\n            margin: 0;\n        }\n        \n        .help-text {\n            font-size: 12px;\n            color: var(--vscode-input-placeholderForeground);\n            margin-top: 5px;\n        }\n        \n        .button-group {\n            display: flex;\n            gap: 15px;\n            justify-content: center;\n            margin-top: 30px;\n        }\n        \n        button {\n            padding: 12px 24px;\n            border: none;\n            border-radius: 4px;\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        \n        .btn-primary {\n            background: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n        }\n        \n        .btn-primary:hover {\n            background: var(--vscode-button-hoverBackground);\n        }\n        \n        .btn-secondary {\n            background: var(--vscode-button-secondaryBackground);\n            color: var(--vscode-button-secondaryForeground);\n        }\n        \n        .btn-secondary:hover {\n            background: var(--vscode-button-secondaryHoverBackground);\n        }\n        \n        .btn-primary:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n        }\n        \n        .progress-section {\n            display: none;\n            background: var(--vscode-panel-background);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 8px;\n            padding: 20px;\n            margin-top: 20px;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 4px;\n            background: var(--vscode-progressBar-background);\n            border-radius: 2px;\n            overflow: hidden;\n            margin-bottom: 10px;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: var(--vscode-button-background);\n            width: 0%;\n            animation: indeterminate 2s infinite;\n        }\n        \n        @keyframes indeterminate {\n            0% { transform: translateX(-100%); }\n            100% { transform: translateX(100%); }\n        }\n        \n        .output-area {\n            max-height: 200px;\n            overflow-y: auto;\n            background: var(--vscode-terminal-background);\n            color: var(--vscode-terminal-foreground);\n            font-family: var(--vscode-editor-font-family), monospace;\n            font-size: 12px;\n            padding: 10px;\n            border-radius: 4px;\n            white-space: pre-wrap;\n        }\n        \n        .model-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 10px;\n            margin-top: 10px;\n        }\n        \n        .model-option {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            padding: 8px;\n            border: 1px solid var(--vscode-input-border);\n            border-radius: 4px;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        \n        .model-option:hover {\n            background: var(--vscode-list-hoverBackground);\n        }\n        \n        .model-option input[type=\"radio\"] {\n            width: auto;\n            margin: 0;\n        }\n        \n        .error-message {\n            background: var(--vscode-inputValidation-errorBackground);\n            color: var(--vscode-inputValidation-errorForeground);\n            border: 1px solid var(--vscode-inputValidation-errorBorder);\n            padding: 10px;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n        \n        .success-message {\n            background: var(--vscode-inputValidation-infoBackground);\n            color: var(--vscode-inputValidation-infoForeground);\n            border: 1px solid var(--vscode-inputValidation-infoBorder);\n            padding: 10px;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🚀 Centrim DocGen</h1>\n            <p>Generate business-focused Git commit documentation using Ollama</p>\n        </div>\n        \n        <div class=\"status-bar\">\n            <div class=\"status-indicator\">\n                <div class=\"status-dot\" id=\"statusDot\"></div>\n                <span id=\"statusText\">Checking Ollama status...</span>\n            </div>\n            <button class=\"btn-secondary\" onclick=\"checkOllamaStatus()\">Refresh Status</button>\n        </div>\n        \n        <form id=\"configForm\">\n            <div class=\"form-section\">\n                <h3>📊 Processing Configuration</h3>\n                \n                <div class=\"form-group\">\n                    <label for=\"diffno\">Number of Recent Commits to Process</label>\n                    <input type=\"number\" id=\"diffno\" name=\"diffno\" min=\"1\" max=\"50\" placeholder=\"Leave empty for default behavior\">\n                    <div class=\"help-text\">Default: 1 if refactoring.md exists, 5 otherwise</div>\n                </div>\n            </div>\n            \n            <div class=\"form-section\">\n                <h3>🤖 Model Configuration</h3>\n                \n                <div class=\"form-group\">\n                    <label>Select Ollama Model</label>\n                    <div class=\"model-grid\">\n                        <div class=\"model-option\">\n                            <input type=\"radio\" id=\"phi3\" name=\"model\" value=\"phi3\" checked>\n                            <label for=\"phi3\">Phi3 (Recommended)</label>\n                        </div>\n                        <div class=\"model-option\">\n                            <input type=\"radio\" id=\"mistral\" name=\"model\" value=\"mistral\">\n                            <label for=\"mistral\">Mistral</label>\n                        </div>\n                        <div class=\"model-option\">\n                            <input type=\"radio\" id=\"tinyllama\" name=\"model\" value=\"tinyllama\">\n                            <label for=\"tinyllama\">TinyLlama</label>\n                        </div>\n                        <div class=\"model-option\">\n                            <input type=\"radio\" id=\"llama3\" name=\"model\" value=\"llama3\">\n                            <label for=\"llama3\">Llama3</label>\n                        </div>\n                        <div class=\"model-option\">\n                            <input type=\"radio\" id=\"codellama\" name=\"model\" value=\"codellama\">\n                            <label for=\"codellama\">CodeLlama</label>\n                        </div>\n                    </div>\n                    <div class=\"help-text\">Model will be automatically downloaded if not available locally</div>\n                </div>\n            </div>\n            \n            <div class=\"form-section\">\n                <h3>⚙️ Advanced Options</h3>\n                \n                <div class=\"form-group\">\n                    <div class=\"checkbox-group\">\n                        <input type=\"checkbox\" id=\"watch\" name=\"watch\">\n                        <label for=\"watch\">Enable Watch Mode (Show raw Ollama output)</label>\n                    </div>\n                    <div class=\"help-text\">Useful for debugging or seeing detailed processing</div>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"customQuery\">Custom Query/Prompt (Optional)</label>\n                    <textarea id=\"customQuery\" name=\"customQuery\" placeholder=\"Enter custom instructions for the AI model...\"></textarea>\n                    <div class=\"help-text\">Override the default business-focused prompt with your own instructions</div>\n                </div>\n            </div>\n            \n            <div class=\"button-group\">\n                <button type=\"button\" class=\"btn-secondary\" onclick=\"resetForm()\">Reset Form</button>\n                <button type=\"submit\" class=\"btn-primary\" id=\"generateBtn\">\n                    🚀 Generate Documentation\n                </button>\n            </div>\n        </form>\n        \n        <div class=\"progress-section\" id=\"progressSection\">\n            <h3>📝 Generation Progress</h3>\n            <div class=\"progress-bar\">\n                <div class=\"progress-fill\"></div>\n            </div>\n            <div class=\"output-area\" id=\"outputArea\"></div>\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        \n        // Check Ollama status on load\n        window.addEventListener('load', () => {\n            checkOllamaStatus();\n        });\n        \n        function checkOllamaStatus() {\n            document.getElementById('statusText').textContent = 'Checking Ollama status...';\n            document.getElementById('statusDot').className = 'status-dot';\n            vscode.postMessage({ command: 'checkOllamaStatus' });\n        }\n        \n        function resetForm() {\n            document.getElementById('configForm').reset();\n            document.getElementById('phi3').checked = true;\n        }\n        \n        document.getElementById('configForm').addEventListener('submit', (e) => {\n            e.preventDefault();\n            \n            const formData = new FormData(e.target);\n            const config = {\n                diffno: formData.get('diffno') ? parseInt(formData.get('diffno')) : null,\n                model: formData.get('model'),\n                watch: formData.get('watch') === 'on',\n                customQuery: formData.get('customQuery') || null\n            };\n            \n            // Show progress section\n            document.getElementById('progressSection').style.display = 'block';\n            document.getElementById('generateBtn').disabled = true;\n            document.getElementById('generateBtn').textContent = '⏳ Generating...';\n            document.getElementById('outputArea').textContent = '';\n            \n            vscode.postMessage({ \n                command: 'generateDocs', \n                config: config \n            });\n        });\n        \n        // Handle messages from extension\n        window.addEventListener('message', event => {\n            const message = event.data;\n            \n            switch (message.command) {\n                case 'ollamaStatus':\n                    const statusDot = document.getElementById('statusDot');\n                    const statusText = document.getElementById('statusText');\n                    const generateBtn = document.getElementById('generateBtn');\n                    \n                    if (message.isRunning) {\n                        statusDot.className = 'status-dot running';\n                        statusText.textContent = 'Ollama server is running ✅';\n                        generateBtn.disabled = false;\n                    } else {\n                        statusDot.className = 'status-dot';\n                        statusText.textContent = 'Ollama server is not running ❌';\n                        generateBtn.disabled = true;\n                    }\n                    break;\n                    \n                case 'generationStarted':\n                    document.getElementById('outputArea').textContent += 'Starting documentation generation...\\\\n';\n                    break;\n                    \n                case 'outputUpdate':\n                    document.getElementById('outputArea').textContent += message.data;\n                    document.getElementById('outputArea').scrollTop = document.getElementById('outputArea').scrollHeight;\n                    break;\n                    \n                case 'errorUpdate':\n                    document.getElementById('outputArea').textContent += '❌ ' + message.data;\n                    document.getElementById('outputArea').scrollTop = document.getElementById('outputArea').scrollHeight;\n                    break;\n                    \n                case 'generationComplete':\n                    const btn = document.getElementById('generateBtn');\n                    btn.disabled = false;\n                    \n                    if (message.success) {\n                        btn.textContent = '✅ Generation Complete!';\n                        document.getElementById('outputArea').textContent += '\\\\n🎉 Documentation generated successfully!\\\\n';\n                        setTimeout(() => {\n                            btn.textContent = '🚀 Generate Documentation';\n                        }, 3000);\n                    } else {\n                        btn.textContent = '❌ Generation Failed';\n                        document.getElementById('outputArea').textContent += '\\\\n❌ Generation failed' + (message.error ? ': ' + message.error : '') + ' \\\\n';\n                        setTimeout(() => {\n                            btn.textContent = '🚀 Generate Documentation';\n                        }, 3000);\n                    }\n                    break;\n            }\n        });\n    </script>\n</body>\n</html>`;\n    }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('Congratulations, \"centrim-docgen\" is now active!');\n\n    const docGenTreeDataProvider = new DocGenTreeDataProvider(); // Instantiate the data provider\n    vscode.window.registerTreeDataProvider(\n        'centrimDocGenSidebarView', // This ID from package.json\n        docGenTreeDataProvider\n    );\n\n    // Register command to open config panel\n    let openConfigPanelDisposable = vscode.commands.registerCommand('centrim-docgen.openConfigPanel', () => {\n        // Pass the treeDataProvider instance to the webview panel\n        DocGenConfigPanel.createOrShow(context.extensionUri, docGenTreeDataProvider);\n    });\n\n    // Register the generateDocs command (still used by the command palette)\n    let generateDocsDisposable = vscode.commands.registerCommand('centrim-docgen.generateDocs', () => {\n        // This command will also open the config panel\n        DocGenConfigPanel.createOrShow(context.extensionUri, docGenTreeDataProvider);\n    });\n\n    // Register the checkStatus command (triggered by the sidebar's \"Refresh Ollama Status\" item)\n    let checkStatusDisposable = vscode.commands.registerCommand('centrim-docgen.checkStatus', async () => {\n        docGenTreeDataProvider.updateStatus('checking_ollama'); // Update sidebar immediately\n        // Perform the actual Ollama status check within the TreeDataProvider itself\n        // Or you could move the logic from DocGenConfigPanel._checkOllamaStatus here\n        const ollamaUrl = vscode.workspace.getConfiguration('centrimDocgen').get<string>('ollamaUrl') || 'http://localhost:11434';\n        try {\n            const response = await fetch(ollamaUrl);\n            if (response.ok) {\n                docGenTreeDataProvider.updateStatus('ollama_ready');\n                vscode.window.showInformationMessage('Ollama server is running.');\n            } else {\n                docGenTreeDataProvider.updateStatus('ollama_not_ready');\n                vscode.window.showWarningMessage('Ollama server is not running or unreachable.');\n            }\n        } catch (error) {\n            docGenTreeDataProvider.updateStatus('ollama_not_ready');\n            vscode.window.showErrorMessage('Could not connect to Ollama server. Check URL and ensure it\\'s running.');\n        }\n    });\n\n    // Add disposable to context\n    context.subscriptions.push(\n        openConfigPanelDisposable,\n        generateDocsDisposable,\n        checkStatusDisposable\n    );\n}\n\nexport function deactivate() {\n    if (DocGenConfigPanel.currentPanel) {\n        DocGenConfigPanel.currentPanel.dispose();\n    }\n}","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","docGenTreeDataProvider","DocGenTreeDataProvider","vscode","window","registerTreeDataProvider","openConfigPanelDisposable","commands","registerCommand","DocGenConfigPanel","createOrShow","extensionUri","generateDocsDisposable","checkStatusDisposable","async","updateStatus","ollamaUrl","workspace","getConfiguration","get","fetch","ok","showInformationMessage","showWarningMessage","error","showErrorMessage","subscriptions","push","currentPanel","dispose","DocGenTreeItem","TreeItem","constructor","label","collapsibleState","command","iconId","super","this","tooltip","description","iconPath","ThemeIcon","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","_status","checkOllamaStatusInSidebar","newStatus","fire","getTreeItem","element","getChildren","Promise","resolve","items","openConfigCommand","title","TreeItemCollapsibleState","None","undefined","treeDataProvider","column","activeTextEditor","viewColumn","_panel","reveal","_treeDataProvider","_checkOllamaStatus","panel","createWebviewPanel","ViewColumn","One","enableScripts","localResourceRoots","Uri","joinPath","_disposables","_extensionUri","_update","onDidDispose","webview","onDidReceiveMessage","message","_generateDocs","config","isRunning","postMessage","outputChannel","createOutputChannel","show","appendLine","workspaceFolders","length","success","repoPath","uri","fsPath","args","path","join","diffno","toString","model","watch","customQuery","pythonExec","process","platform","pythonProcess","spawn","cwd","stdout","on","data","append","stderr","split","code","executeCommand","err","x","pop","html","_getHtmlForWebview","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}