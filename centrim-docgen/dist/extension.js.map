{"version":3,"file":"extension.js","mappings":"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","sources":[".././src/extension.ts","../external node-commonjs \"child_process\"","../external commonjs \"vscode\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as vscode from 'vscode';\nimport * as path from 'path';\nimport { spawn } from 'child_process';\n\n// Define a simple TreeItem for our sidebar view\nclass DocGenTreeItem extends vscode.TreeItem {\n\tconstructor(\n\t\tpublic readonly label: string,\n\t\tpublic readonly collapsibleState: vscode.TreeItemCollapsibleState,\n\t\tpublic readonly command?: vscode.Command\n\t) {\n\t\tsuper(label, collapsibleState);\n\t\tthis.tooltip = this.label;\n\t\tthis.description = \"Click to generate documentation\";\n\t}\n}\n\n// Define a TreeDataProvider for our sidebar view\nclass DocGenTreeDataProvider implements vscode.TreeDataProvider<DocGenTreeItem> {\n\tgetTreeItem(element: DocGenTreeItem): vscode.TreeItem {\n\t\treturn element;\n\t}\n\n\tgetChildren(element?: DocGenTreeItem): Thenable<DocGenTreeItem[]> {\n\t\tif (element) {\n\t\t\t// No children for now, just a single action\n\t\t\treturn Promise.resolve([]);\n\t\t} else {\n\t\t\t// Root elements of the tree view\n\t\t\tconst generateDocsCommand: vscode.Command = {\n\t\t\t\tcommand: 'centrim-docgen.generateDocs', // Command to execute\n\t\t\t\ttitle: 'Generate Commit Documentation',\n\t\t\t\ttooltip: 'Generate documentation for the latest Git commit(s) using Ollama.'\n\t\t\t};\n\t\t\treturn Promise.resolve([\n\t\t\t\tnew DocGenTreeItem('Generate Docs', vscode.TreeItemCollapsibleState.None, generateDocsCommand)\n\t\t\t]);\n\t\t}\n\t}\n}\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconsole.log('Congratulations, \"centrim-docgen\" is now active!');\n\n\t// Register the TreeDataProvider for the custom sidebar view\n\tvscode.window.registerTreeDataProvider(\n\t\t'centrimDocGenSidebarView', // This ID must match the 'id' in package.json under 'contributes.views'\n\t\tnew DocGenTreeDataProvider()\n\t);\n\n\t// Register the main command\n\tlet disposable = vscode.commands.registerCommand('centrim-docgen.generateDocs', async () => {\n\t\tconst outputChannel = vscode.window.createOutputChannel(\"Centrim DocGen\");\n\t\toutputChannel.show(true);\n\t\toutputChannel.appendLine(\"--- Centrim DocGen Session Started ---\");\n\n\t\tconst workspaceFolders = vscode.workspace.workspaceFolders;\n\t\tif (!workspaceFolders || workspaceFolders.length === 0) {\n\t\t\tvscode.window.showErrorMessage(\"No workspace folder open. Please open a Git repository folder.\");\n\t\t\toutputChannel.appendLine(\"Error: No workspace folder open.\");\n\t\t\toutputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst repoPath = workspaceFolders[0].uri.fsPath;\n\n\t\t// --- Collect User Inputs ---\n\n\t\t// 1. Get --diffno (optional)\n\t\tconst diffnoInput = await vscode.window.showInputBox({\n\t\t\tprompt: \"Enter number of recent diffs to process (e.g., 5). Leave empty for default.\",\n\t\t\tplaceHolder: \"Default: 1 (latest) if refactoring.md exists, 5 otherwise\"\n\t\t});\n\t\tlet diffnoArg: string[] = [];\n\t\tif (diffnoInput && !isNaN(parseInt(diffnoInput))) {\n\t\t\tdiffnoArg = ['--diffno', diffnoInput];\n\t\t}\n\n\t\t// 2. Get --model (optional, with quick pick suggestions)\n\t\tconst modelSuggestions = ['phi3', 'mistral', 'tinyllama', 'llama3'];\n\t\tconst modelInput = await vscode.window.showQuickPick(modelSuggestions, {\n\t\t\tplaceHolder: \"Select Ollama model (e.g., 'phi3') or type custom name. Leave empty for interactive prompt.\",\n\t\t\tcanPickMany: false\n\t\t});\n\t\tlet modelArg: string[] = [];\n\t\tif (modelInput) {\n\t\t\tmodelArg = ['--model', modelInput];\n\t\t}\n\n\t\t// 3. Get --watch (optional)\n\t\tconst watchMode = await vscode.window.showQuickPick(['Yes', 'No'], {\n\t\t\ttitle: \"Enable --watch mode? (Show raw Ollama output)\",\n\t\t\tplaceHolder: \"No\"\n\t\t});\n\t\tlet watchArg: string[] = [];\n\t\tif (watchMode === 'Yes') {\n\t\t\twatchArg = ['--watch'];\n\t\t}\n\n\t\t// 4. Get Custom Query (optional)\n\t\tconst useCustomQuery = await vscode.window.showQuickPick(['Yes', 'No'], {\n\t\t\ttitle: \"Use a custom query/prompt for Ollama?\",\n\t\t\tplaceHolder: \"No\"\n\t\t});\n\t\tlet customQueryArg: string[] = [];\n\t\tif (useCustomQuery === 'Yes') {\n\t\t\tconst queryText = await vscode.window.showInputBox({\n\t\t\t\tprompt: \"Enter your custom query/prompt for Ollama:\",\n\t\t\t\tplaceHolder: \"e.g., 'Summarize these changes in a very technical way.'\"\n\t\t\t});\n\t\t\tif (queryText) {\n\t\t\t\tcustomQueryArg = ['--custom-query', queryText];\n\t\t\t} else {\n\t\t\t\tvscode.window.showWarningMessage(\"No custom query entered. Proceeding with default prompt.\");\n\t\t\t}\n\t\t}\n\n\t\t// --- Prepare Python Script Execution ---\n\n\t\tconst pythonScriptPath = path.join(context.extensionPath, 'src', 'python_scripts', 'git_doc_tool.py');\n\t\tconst pythonExec = process.platform === 'win32' ? 'python' : 'python3';\n\n\t\tconst args = [\n\t\t\tpythonScriptPath,\n\t\t\t...diffnoArg,\n\t\t\t...modelArg,\n\t\t\t...watchArg,\n\t\t\t...customQueryArg // Add the custom query argument\n\t\t];\n\n\t\toutputChannel.appendLine(`Executing: ${pythonExec} ${args.join(' ')}`);\n\t\toutputChannel.appendLine(`In directory: ${repoPath}`);\n\t\toutputChannel.appendLine(\"------------------------------------\");\n\n\t\ttry {\n\t\t\tconst pythonProcess = spawn(pythonExec, args, { cwd: repoPath });\n\n\t\t\tpythonProcess.stdout.on('data', (data) => {\n\t\t\t\toutputChannel.append(data.toString());\n\t\t\t});\n\n\t\t\tpythonProcess.stderr.on('data', (data) => {\n\t\t\t\toutputChannel.append(data.toString());\n\t\t\t\tvscode.window.showErrorMessage(`Centrim DocGen Error: ${data.toString().split('\\n')[0]}`);\n\t\t\t});\n\n\t\t\tpythonProcess.on('close', (code) => {\n\t\t\t\tif (code === 0) {\n\t\t\t\t\tvscode.window.showInformationMessage('Centrim DocGen: Documentation generated successfully!');\n\t\t\t\t\toutputChannel.appendLine(\"Centrim DocGen: Script finished successfully.\");\n\t\t\t\t\tvscode.commands.executeCommand('workbench.files.action.refreshExplorer');\n\t\t\t\t} else {\n\t\t\t\t\tvscode.window.showErrorMessage(`Centrim DocGen: Script exited with code ${code}. Check output channel for details.`);\n\t\t\t\t\toutputChannel.appendLine(`Centrim DocGen: Script exited with code ${code}.`);\n\t\t\t\t}\n\t\t\t\toutputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n\t\t\t});\n\n\t\t\tpythonProcess.on('error', (err) => {\n\t\t\t\tvscode.window.showErrorMessage(`Failed to start Python script: ${err.message}. Make sure Python is installed and in your PATH.`);\n\t\t\t\toutputChannel.appendLine(`Error starting Python script: ${err.message}`);\n\t\t\t\toutputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n\t\t\t});\n\n\t\t} catch (error: any) {\n\t\t\tvscode.window.showErrorMessage(`An unexpected error occurred: ${error.message}`);\n\t\t\toutputChannel.appendLine(`Unexpected error: ${error.message}`);\n\t\t\toutputChannel.appendLine(\"--- Centrim DocGen Session Ended ---\");\n\t\t}\n\t});\n\n\tcontext.subscriptions.push(disposable);\n}\n\nexport function deactivate() { }\n","module.exports = require(\"child_process\");","module.exports = require(\"vscode\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["context","console","log","vscode","window","registerTreeDataProvider","DocGenTreeDataProvider","disposable","commands","registerCommand","async","outputChannel","createOutputChannel","show","appendLine","workspaceFolders","workspace","length","showErrorMessage","repoPath","uri","fsPath","diffnoInput","showInputBox","prompt","placeHolder","diffnoArg","isNaN","parseInt","modelInput","showQuickPick","canPickMany","modelArg","watchArg","title","customQueryArg","queryText","showWarningMessage","pythonScriptPath","path","join","extensionPath","pythonExec","process","platform","args","pythonProcess","spawn","cwd","stdout","on","data","append","toString","stderr","split","code","showInformationMessage","executeCommand","err","message","error","subscriptions","push","DocGenTreeItem","TreeItem","constructor","label","collapsibleState","command","super","this","tooltip","description","getTreeItem","element","getChildren","Promise","resolve","generateDocsCommand","TreeItemCollapsibleState","None","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}