(()=>{"use strict";var e={265:function(e,n,t){var o,a=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var a=Object.getOwnPropertyDescriptor(n,t);a&&!("get"in a?!n.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,a)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),i=this&&this.__importStar||(o=function(e){return o=Object.getOwnPropertyNames||function(e){var n=[];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[n.length]=t);return n},o(e)},function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t=o(e),i=0;i<t.length;i++)"default"!==t[i]&&a(n,e,t[i]);return r(n,e),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(e){console.log('Congratulations, "centrim-docgen" is now active!');const n=new u;s.window.registerTreeDataProvider("centrimDocGenSidebarView",n);let t=s.commands.registerCommand("centrim-docgen.openConfigPanel",()=>{p.createOrShow(e.extensionUri,n)}),o=s.commands.registerCommand("centrim-docgen.generateDocs",()=>{p.createOrShow(e.extensionUri,n)}),a=s.commands.registerCommand("centrim-docgen.checkStatus",async()=>{n.updateStatus("checking_ollama");const e=s.workspace.getConfiguration("centrimDocgen").get("ollamaUrl")||"http://localhost:11434";try{(await fetch(e)).ok?(n.updateStatus("ollama_ready"),s.window.showInformationMessage("Ollama server is running.")):(n.updateStatus("ollama_not_ready"),s.window.showWarningMessage("Ollama server is not running or unreachable."))}catch(e){n.updateStatus("ollama_not_ready"),s.window.showErrorMessage("Could not connect to Ollama server. Check URL and ensure it's running.")}});e.subscriptions.push(t,o,a)},n.deactivate=function(){p.currentPanel&&p.currentPanel.dispose()};const s=i(t(398)),d=i(t(928)),c=t(317);class l extends s.TreeItem{constructor(e,n,t,o="rocket"){super(e,n),this.label=e,this.collapsibleState=n,this.command=t,this.tooltip=this.label,this.description="Click to configure and generate",this.iconPath=new s.ThemeIcon(o)}}class u{constructor(){this._onDidChangeTreeData=new s.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event,this._status="idle",this.updateStatus("checking_ollama"),this.checkOllamaStatusInSidebar()}updateStatus(e){this._status=e,this._onDidChangeTreeData.fire()}getTreeItem(e){return e}getChildren(e){if(e)return Promise.resolve([]);const n=[],t={command:"centrim-docgen.openConfigPanel",title:"Open Documentation Configuration",tooltip:"Open the panel to configure and generate documentation"};switch(this._status){case"checking_ollama":n.push(new l("Checking Ollama Status...",s.TreeItemCollapsibleState.None,void 0,"sync~spin")),n[0].description="Please wait";break;case"ollama_ready":n.push(new l("Generate Documentation",s.TreeItemCollapsibleState.None,t,"file-text")),n[0].description="Ollama is Ready!",n[0].tooltip="Click to open configuration and generate documentation.";break;case"ollama_not_ready":n.push(new l("Ollama Not Running",s.TreeItemCollapsibleState.None,{command:"centrim-docgen.openSettings",title:"Open Settings"},"warning")),n[0].description="Click to open settings and configure Ollama URL.",n[0].tooltip="Ollama server is unreachable. Please start it or check settings.";break;case"generating":n.push(new l("Generating Documentation...",s.TreeItemCollapsibleState.None,void 0,"tools")),n[0].description="Please wait...";break;case"generation_complete":n.push(new l("Documentation Generated",s.TreeItemCollapsibleState.None,t,"check")),n[0].description="Click to generate again.";break;default:n.push(new l("Generate Documentation",s.TreeItemCollapsibleState.None,t,"rocket")),n[0].description="Open configuration panel."}return n.push(new l("Refresh Ollama Status",s.TreeItemCollapsibleState.None,{command:"centrim-docgen.checkStatus",title:"Check Ollama Status Now"},"sync")),Promise.resolve(n)}async checkOllamaStatusInSidebar(){const e=s.workspace.getConfiguration("centrimDocgen").get("ollamaUrl")||"http://localhost:11434";try{(await fetch(e)).ok?this.updateStatus("ollama_ready"):this.updateStatus("ollama_not_ready")}catch(e){this.updateStatus("ollama_not_ready")}}}class p{static createOrShow(e,n){const t=s.window.activeTextEditor?s.window.activeTextEditor.viewColumn:void 0;if(p.currentPanel)return p.currentPanel._panel.reveal(t),p.currentPanel._treeDataProvider=n,void p.currentPanel._checkOllamaStatus();const o=s.window.createWebviewPanel("centrimDocGenConfig","Centrim DocGen Configuration",t||s.ViewColumn.One,{enableScripts:!0,localResourceRoots:[s.Uri.joinPath(e,"media")]});p.currentPanel=new p(o,e,n)}constructor(e,n,t){this._disposables=[],this._panel=e,this._extensionUri=n,this._treeDataProvider=t,this._update(),this._panel.onDidDispose(()=>this.dispose(),null,this._disposables),this._panel.webview.onDidReceiveMessage(e=>{switch(e.command){case"generateDocs":return void this._generateDocs(e.config);case"checkOllamaStatus":return void this._checkOllamaStatus()}},null,this._disposables)}async _checkOllamaStatus(){const e=s.workspace.getConfiguration("centrimDocgen").get("ollamaUrl")||"http://localhost:11434";try{const n=(await fetch(e)).ok;this._panel.webview.postMessage({command:"ollamaStatus",isRunning:n}),this._treeDataProvider.updateStatus(n?"ollama_ready":"ollama_not_ready")}catch(e){this._panel.webview.postMessage({command:"ollamaStatus",isRunning:!1}),this._treeDataProvider.updateStatus("ollama_not_ready")}}async _generateDocs(e){const n=s.window.createOutputChannel("Centrim DocGen");n.show(!0),n.appendLine("--- Centrim DocGen Session Started ---"),this._treeDataProvider.updateStatus("generating");const t=s.workspace.workspaceFolders;if(!t||0===t.length)return s.window.showErrorMessage("No workspace folder open. Please open a Git repository folder."),n.appendLine("Error: No workspace folder open."),n.appendLine("--- Centrim DocGen Session Ended ---"),this._panel.webview.postMessage({command:"generationComplete",success:!1,error:"No workspace folder open."}),void this._treeDataProvider.updateStatus("idle");const o=t[0].uri.fsPath,a=[d.join(this._extensionUri.fsPath,"src","python_scripts","git_doc_tool.py")];if(e.diffno&&a.push("--diffno",e.diffno.toString()),e.model&&a.push("--model",e.model),e.diffLimit)a.push("--diff-limit",e.diffLimit.toString());else{const e=s.workspace.getConfiguration("centrimDocgen").get("diffLimit");void 0!==e&&a.push("--diff-limit",e.toString())}e.watch&&a.push("--watch");const r="win32"===process.platform?"python":"python3";n.appendLine(`Executing: ${r} ${a.join(" ")}`),n.appendLine(`In directory: ${o}`),n.appendLine("------------------------------------"),this._panel.webview.postMessage({command:"generationStarted"});try{const e=(0,c.spawn)(r,a,{cwd:o});e.stdout.on("data",e=>{n.append(e.toString()),this._panel.webview.postMessage({command:"outputUpdate",data:e.toString()})}),e.stderr.on("data",e=>{n.append(e.toString()),this._panel.webview.postMessage({command:"errorUpdate",data:e.toString()}),s.window.showErrorMessage(`Centrim DocGen Error: ${e.toString().split("\n")[0]}`)}),e.on("close",e=>{0===e?(s.window.showInformationMessage("Centrim DocGen: Documentation generated successfully!"),n.appendLine("Centrim DocGen: Script finished successfully."),s.commands.executeCommand("workbench.files.action.refreshExplorer"),this._panel.webview.postMessage({command:"generationComplete",success:!0}),this._treeDataProvider.updateStatus("generation_complete")):(s.window.showErrorMessage(`Centrim DocGen: Script exited with code ${e}. Check output channel for details.`),n.appendLine(`Centrim DocGen: Script exited with code ${e}.`),this._panel.webview.postMessage({command:"generationComplete",success:!1,code:e}),this._treeDataProvider.updateStatus("ollama_ready")),n.appendLine("--- Centrim DocGen Session Ended ---")}),e.on("error",e=>{s.window.showErrorMessage(`Failed to start Python script: ${e.message}. Make sure Python is installed and in your PATH.`),n.appendLine(`Error starting Python script: ${e.message}`),n.appendLine("--- Centrim DocGen Session Ended ---"),this._panel.webview.postMessage({command:"generationComplete",success:!1,error:e.message}),this._treeDataProvider.updateStatus("ollama_not_ready")})}catch(e){s.window.showErrorMessage(`An unexpected error occurred: ${e.message}`),n.appendLine(`Unexpected error: ${e.message}`),n.appendLine("--- Centrim DocGen Session Ended ---"),this._panel.webview.postMessage({command:"generationComplete",success:!1,error:e.message}),this._treeDataProvider.updateStatus("ollama_not_ready")}}dispose(){for(p.currentPanel=void 0,this._panel.dispose();this._disposables.length;){const e=this._disposables.pop();e&&e.dispose()}}_update(){const e=this._panel.webview;this._panel.title="Centrim DocGen Configuration",this._panel.webview.html=this._getHtmlForWebview(e)}_getHtmlForWebview(e){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>Centrim DocGen Configuration</title>\n    <style>\n        * {\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background: var(--vscode-editor-background);\n            color: var(--vscode-editor-foreground);\n            line-height: 1.6;\n        }\n        \n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        \n        .header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 8px;\n            background: var(--vscode-panel-background);\n        }\n        \n        .header h1 {\n            margin: 0 0 10px 0;\n            color: var(--vscode-textLink-foreground);\n            font-size: 24px;\n        }\n        \n        .header p {\n            margin: 0;\n            opacity: 0.8;\n        }\n        \n        .status-bar {\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            padding: 15px;\n            margin-bottom: 20px;\n            border-radius: 6px;\n            background: var(--vscode-inputValidation-infoBorder);\n            color: var(--vscode-inputValidation-infoForeground);\n        }\n        \n        .status-indicator {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        \n        .status-dot {\n            width: 10px;\n            height: 10px;\n            border-radius: 50%;\n            background: var(--vscode-inputValidation-errorBorder);\n        }\n        \n        .status-dot.running {\n            background: var(--vscode-inputValidation-infoBorder);\n            animation: pulse 2s infinite;\n        }\n        \n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n        \n        .form-section {\n            background: var(--vscode-panel-background);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 8px;\n            padding: 25px;\n            margin-bottom: 20px;\n        }\n        \n        .form-section h3 {\n            margin: 0 0 20px 0;\n            color: var(--vscode-textLink-foreground);\n            font-size: 18px;\n        }\n        \n        .form-group {\n            margin-bottom: 20px;\n        }\n        \n        .form-group:last-child {\n            margin-bottom: 0;\n        }\n        \n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 500;\n            color: var(--vscode-input-foreground);\n        }\n        \n        input, select, textarea {\n            width: 100%;\n            padding: 10px 12px;\n            border: 1px solid var(--vscode-input-border);\n            border-radius: 4px;\n            background: var(--vscode-input-background);\n            color: var(--vscode-input-foreground);\n            font-size: 14px;\n            font-family: inherit;\n        }\n        \n        input:focus, select:focus, textarea:focus {\n            outline: none;\n            border-color: var(--vscode-focusBorder);\n        }\n        \n        textarea {\n            resize: vertical;\n            min-height: 80px;\n        }\n        \n        .checkbox-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .checkbox-group input[type="checkbox"] {\n            width: auto;\n            margin: 0;\n        }\n        \n        .help-text {\n            font-size: 12px;\n            color: var(--vscode-input-placeholderForeground);\n            margin-top: 5px;\n        }\n        \n        .button-group {\n            display: flex;\n            gap: 15px;\n            justify-content: center;\n            margin-top: 30px;\n        }\n        \n        button {\n            padding: 12px 24px;\n            border: none;\n            border-radius: 4px;\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        \n        .btn-primary {\n            background: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n        }\n        \n        .btn-primary:hover {\n            background: var(--vscode-button-hoverBackground);\n        }\n        \n        .btn-secondary {\n            background: var(--vscode-button-secondaryBackground);\n            color: var(--vscode-button-secondaryForeground);\n        }\n        \n        .btn-secondary:hover {\n            background: var(--vscode-button-secondaryHoverBackground);\n        }\n        \n        .btn-primary:disabled {\n            opacity: 0.6;\n            cursor: not-allowed;\n        }\n        \n        .progress-section {\n            display: none;\n            background: var(--vscode-panel-background);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 8px;\n            padding: 20px;\n            margin-top: 20px;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 4px;\n            background: var(--vscode-progressBar-background);\n            border-radius: 2px;\n            overflow: hidden;\n            margin-bottom: 10px;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background: var(--vscode-button-background);\n            width: 0%;\n            animation: indeterminate 2s infinite;\n        }\n        \n        @keyframes indeterminate {\n            0% { transform: translateX(-100%); }\n            100% { transform: translateX(100%); }\n        }\n        \n        .output-area {\n            max-height: 200px;\n            overflow-y: auto;\n            background: var(--vscode-terminal-background);\n            color: var(--vscode-terminal-foreground);\n            font-family: var(--vscode-editor-font-family), monospace;\n            font-size: 12px;\n            padding: 10px;\n            border-radius: 4px;\n            white-space: pre-wrap;\n        }\n        \n        .model-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 10px;\n            margin-top: 10px;\n        }\n        \n        .model-option {\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            padding: 8px;\n            border: 1px solid var(--vscode-input-border);\n            border-radius: 4px;\n            cursor: pointer;\n            transition: all 0.2s;\n        }\n        \n        .model-option:hover {\n            background: var(--vscode-list-hoverBackground);\n        }\n        \n        .model-option input[type="radio"] {\n            width: auto;\n            margin: 0;\n        }\n        \n        .error-message {\n            background: var(--vscode-inputValidation-errorBackground);\n            color: var(--vscode-inputValidation-errorForeground);\n            border: 1px solid var(--vscode-inputValidation-errorBorder);\n            padding: 10px;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n        \n        .success-message {\n            background: var(--vscode-inputValidation-infoBackground);\n            color: var(--vscode-inputValidation-infoForeground);\n            border: 1px solid var(--vscode-inputValidation-infoBorder);\n            padding: 10px;\n            border-radius: 4px;\n            margin-top: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class="container">\n        <div class="header">\n            <h1>🚀 Centrim DocGen</h1>\n            <p>Generate business-focused Git commit documentation using Ollama</p>\n        </div>\n        \n        <div class="status-bar">\n            <div class="status-indicator">\n                <div class="status-dot" id="statusDot"></div>\n                <span id="statusText">Checking Ollama status...</span>\n            </div>\n            <button class="btn-secondary" onclick="checkOllamaStatus()">Refresh Status</button>\n        </div>\n        \n        <form id="configForm">\n            <div class="form-section">\n                <h3>📊 Processing Configuration</h3>\n                \n                <div class="form-group">\n                    <label for="diffno">Number of Recent Commits to Process</label>\n                    <input type="number" id="diffno" name="diffno" min="1" max="50" placeholder="Leave empty for default behavior">\n                    <div class="help-text">Default: 1 if refactoring.md exists, 5 otherwise</div>\n                </div>\n\n                <div class="form-group">\n                    <label for="diffLimit">Diff Character Limit for AI</label>\n                    <input type="number" id="diffLimit" name="diffLimit" min="1000" max="50000" placeholder="e.g., 5000">\n                    <div class="help-text">Maximum characters of Git diff to send to the AI model. Larger diffs may be truncated. Default: 5000.</div>\n                </div>\n            </div>\n            \n            <div class="form-section">\n                <h3>🤖 Model Configuration</h3>\n                \n                <div class="form-group">\n                    <label>Select Ollama Model</label>\n                    <div class="model-grid">\n                        <div class="model-option">\n                            <input type="radio" id="phi3" name="model" value="phi3" checked>\n                            <label for="phi3">Phi3 (Recommended)</label>\n                        </div>\n                        <div class="model-option">\n                            <input type="radio" id="mistral" name="model" value="mistral">\n                            <label for="mistral">Mistral</label>\n                        </div>\n                        <div class="model-option">\n                            <input type="radio" id="tinyllama" name="model" value="tinyllama">\n                            <label for="tinyllama">TinyLlama</label>\n                        </div>\n                        <div class="model-option">\n                            <input type="radio" id="llama3" name="model" value="llama3">\n                            <label for="llama3">Llama3</label>\n                        </div>\n                        <div class="model-option">\n                            <input type="radio" id="codellama" name="model" value="codellama">\n                            <label for="codellama">CodeLlama</label>\n                        </div>\n                    </div>\n                    <div class="help-text">Model will be automatically downloaded if not available locally</div>\n                </div>\n            </div>\n            \n            <div class="form-section">\n                <h3>⚙️ Advanced Options</h3>\n                <div class="form-group">\n                    <div class="checkbox-group">\n                        <input type="checkbox" id="watch" name="watch">\n                        <label for="watch">Enable Watch Mode (Show raw Ollama output)</label>\n                    </div>\n                    <div class="help-text">Useful for debugging or seeing detailed processing</div>\n                </div>\n            </div>\n            <div class="button-group">\n                <button type="button" class="btn-secondary" onclick="resetForm()">Reset Form</button>\n                <button type="submit" class="btn-primary" id="generateBtn">\n                    🚀 Generate Documentation\n                </button>\n            </div>\n        </form>\n        \n        <div class="progress-section" id="progressSection">\n            <h3>📝 Generation Progress</h3>\n            <div class="progress-bar">\n                <div class="progress-fill"></div>\n            </div>\n            <div class="output-area" id="outputArea"></div>\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        \n        // Check Ollama status on load\n        window.addEventListener(\'load\', () => {\n            checkOllamaStatus();\n        });\n        \n        function checkOllamaStatus() {\n            document.getElementById(\'statusText\').textContent = \'Checking Ollama status...\';\n            document.getElementById(\'statusDot\').className = \'status-dot\';\n            vscode.postMessage({ command: \'checkOllamaStatus\' });\n        }\n        \n        function resetForm() {\n            document.getElementById(\'configForm\').reset();\n            document.getElementById(\'phi3\').checked = true;\n        }\n        \n        document.getElementById(\'configForm\').addEventListener(\'submit\', (e) => {\n            e.preventDefault();\n            const formData = new FormData(e.target);\n            const config = {\n                diffno: formData.get(\'diffno\') ? parseInt(formData.get(\'diffno\')) : null,\n                model: formData.get(\'model\'),\n                diffLimit: formData.get(\'diffLimit\') ? parseInt(formData.get(\'diffLimit\')) : null,\n                watch: formData.get(\'watch\') === \'on\'\n            };\n            document.getElementById(\'progressSection\').style.display = \'block\';\n            document.getElementById(\'generateBtn\').disabled = true;\n            document.getElementById(\'generateBtn\').textContent = \'⏳ Generating...\';\n            document.getElementById(\'outputArea\').textContent = \'\';\n            vscode.postMessage({ \n                command: \'generateDocs\', \n                config: config \n            });\n        });\n        \n        // Handle messages from extension\n        window.addEventListener(\'message\', event => {\n            const message = event.data;\n            \n            switch (message.command) {\n                case \'ollamaStatus\':\n                    const statusDot = document.getElementById(\'statusDot\');\n                    const statusText = document.getElementById(\'statusText\');\n                    const generateBtn = document.getElementById(\'generateBtn\');\n                    \n                    if (message.isRunning) {\n                        statusDot.className = \'status-dot running\';\n                        statusText.textContent = \'Ollama server is running ✅\';\n                        generateBtn.disabled = false;\n                    } else {\n                        statusDot.className = \'status-dot\';\n                        statusText.textContent = \'Ollama server is not running ❌\';\n                        generateBtn.disabled = true;\n                    }\n                    break;\n                    \n                case \'generationStarted\':\n                    document.getElementById(\'outputArea\').textContent += \'Starting documentation generation...\\n\';\n                    break;\n                    \n                case \'outputUpdate\':\n                    document.getElementById(\'outputArea\').textContent += message.data;\n                    document.getElementById(\'outputArea\').scrollTop = document.getElementById(\'outputArea\').scrollHeight;\n                    break;\n                    \n                case \'errorUpdate\':\n                    document.getElementById(\'outputArea\').textContent += \'❌ \' + message.data;\n                    document.getElementById(\'outputArea\').scrollTop = document.getElementById(\'outputArea\').scrollHeight;\n                    break;\n                    \n                case \'generationComplete\':\n                    const btn = document.getElementById(\'generateBtn\');\n                    btn.disabled = false;\n                    \n                    if (message.success) {\n                        btn.textContent = \'✅ Generation Complete!\';\n                        document.getElementById(\'outputArea\').textContent += \'\\n🎉 Documentation generated successfully!\\n\';\n                        setTimeout(() => {\n                            btn.textContent = \'🚀 Generate Documentation\';\n                        }, 3000);\n                    } else {\n                        btn.textContent = \'❌ Generation Failed\';\n                        document.getElementById(\'outputArea\').textContent += \'\\n❌ Generation failed\' + (message.error ? \': \' + message.error : \'\') + \' \\n\';\n                        setTimeout(() => {\n                            btn.textContent = \'🚀 Generate Documentation\';\n                        }, 3000);\n                    }\n                    break;\n            }\n        });\n    <\/script>\n</body>\n</html>'}}},317:e=>{e.exports=require("child_process")},398:e=>{e.exports=require("vscode")},928:e=>{e.exports=require("path")}},n={},t=function t(o){var a=n[o];if(void 0!==a)return a.exports;var r=n[o]={exports:{}};return e[o].call(r.exports,r,r.exports,t),r.exports}(265);module.exports=t})();